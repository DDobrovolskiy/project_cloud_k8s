#TEST-SERVICE
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-service      #название пода
  labels:
    tier: test-service    #слой
    app: cloud-k8s        #название приложения
spec:
  replicas: 1             #количество реплик
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 100%
    type: RollingUpdate
  selector:
    matchLabels:
      tier: test-service  #связь между деплойментом и управляемыми подами
  template:
    metadata:
      labels:
        tier: test-service #должно коррелировать с spec.selector.matchLabels, чтобы создаваемые поды могли быть "подхвачены" деплойментом
    spec:
      containers:
        - name: test-service
          image: ddobrovolskiy/cloud-test:0.0.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: test-config   #Ссылаемся на уже созданный ConfigMap
          ports:
            - containerPort: 8080
              protocol: TCP
#          readinessProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            initialDelaySeconds: 5  #задежка перед первой проверкой
#            periodSeconds: 3        #интервал между проверками
#          resources:
#            limits:
#              memory: "256Mi"
#              cpu: "200m"
#            requests:
#              memory: "128Mi"
#              cpu: "50m"

---
#FACADE-SERVICE
apiVersion: apps/v1
kind: Deployment
metadata:
  name: facade-service      #название пода
  labels:
    tier: facade-service    #слой
    app: cloud-k8s        #название приложения
spec:
  replicas: 1             #количество реплик
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 100%
    type: RollingUpdate
  selector:
    matchLabels:
      tier: facade-service  #связь между деплойментом и управляемыми подами
  template:
    metadata:
      labels:
        tier: facade-service #должно коррелировать с spec.selector.matchLabels, чтобы создаваемые поды могли быть "подхвачены" деплойментом
    spec:
      containers:
        - name: facade-service
          image: ddobrovolskiy/cloud-facade:0.0.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: facade-config   #Ссылаемся на уже созданный ConfigMap
          ports:
            - containerPort: 8080
              protocol: TCP
#          readinessProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            initialDelaySeconds: 5  #задежка перед первой проверкой
#            periodSeconds: 3        #интервал между проверками
#          resources:
#            limits:
#              memory: "256Mi"
#              cpu: "200m"
#            requests:
#              memory: "128Mi"
#              cpu: "50m"